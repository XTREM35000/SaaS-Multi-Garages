export interface PhoneNumber {
  countryCode: string;
  nationalNumber: string;
  formattedDisplay: string;
  formattedStorage: string;
  isValid: boolean;
}

export const COUNTRY_CODES = {
  FR: { code: '+33', name: 'France', flag: 'ðŸ‡«ðŸ‡·' },
  CI: { code: '+225', name: 'CÃ´te d\'Ivoire', flag: 'ðŸ‡¨ðŸ‡®' },
  SN: { code: '+221', name: 'SÃ©nÃ©gal', flag: 'ðŸ‡¸ðŸ‡³' },
  ML: { code: '+223', name: 'Mali', flag: 'ðŸ‡²ðŸ‡±' },
  BF: { code: '+226', name: 'Burkina Faso', flag: 'ðŸ‡§ðŸ‡«' },
  NE: { code: '+227', name: 'Niger', flag: 'ðŸ‡³ðŸ‡ª' },
  TG: { code: '+228', name: 'Togo', flag: 'ðŸ‡¹ðŸ‡¬' },
  BJ: { code: '+229', name: 'BÃ©nin', flag: 'ðŸ‡§ðŸ‡¯' },
  CM: { code: '+237', name: 'Cameroun', flag: 'ðŸ‡¨ðŸ‡²' },
  TD: { code: '+235', name: 'Tchad', flag: 'ðŸ‡¹ðŸ‡©' },
  CF: { code: '+236', name: 'RÃ©publique centrafricaine', flag: 'ðŸ‡¨ðŸ‡«' },
  GA: { code: '+241', name: 'Gabon', flag: 'ðŸ‡¬ðŸ‡¦' },
  CG: { code: '+242', name: 'Congo', flag: 'ðŸ‡¨ðŸ‡¬' },
  CD: { code: '+243', name: 'RÃ©publique dÃ©mocratique du Congo', flag: 'ðŸ‡¨ðŸ‡©' },
  GQ: { code: '+240', name: 'GuinÃ©e Ã©quatoriale', flag: 'ðŸ‡¬ðŸ‡¶' },
  ST: { code: '+239', name: 'Sao TomÃ©-et-Principe', flag: 'ðŸ‡¸ðŸ‡¹' },
  GW: { code: '+245', name: 'GuinÃ©e-Bissau', flag: 'ðŸ‡¬ðŸ‡¼' },
  GN: { code: '+224', name: 'GuinÃ©e', flag: 'ðŸ‡¬ðŸ‡³' },
  MR: { code: '+222', name: 'Mauritanie', flag: 'ðŸ‡²ðŸ‡·' },
  GM: { code: '+220', name: 'Gambie', flag: 'ðŸ‡¬ðŸ‡²' },
  SL: { code: '+232', name: 'Sierra Leone', flag: 'ðŸ‡¸ðŸ‡±' },
  LR: { code: '+231', name: 'LibÃ©ria', flag: 'ðŸ‡±ðŸ‡·' },
  GH: { code: '+233', name: 'Ghana', flag: 'ðŸ‡¬ðŸ‡­' },
  NG: { code: '+234', name: 'Nigeria', flag: 'ðŸ‡³ðŸ‡¬' },
  DZ: { code: '+213', name: 'AlgÃ©rie', flag: 'ðŸ‡©ðŸ‡¿' },
  TN: { code: '+216', name: 'Tunisie', flag: 'ðŸ‡¹ðŸ‡³' },
  LY: { code: '+218', name: 'Libye', flag: 'ðŸ‡±ðŸ‡¾' },
  EG: { code: '+20', name: 'Ã‰gypte', flag: 'ðŸ‡ªðŸ‡¬' },
  MA: { code: '+212', name: 'Maroc', flag: 'ðŸ‡²ðŸ‡¦' },
  SD: { code: '+249', name: 'Soudan', flag: 'ðŸ‡¸ðŸ‡©' },
  SS: { code: '+211', name: 'Soudan du Sud', flag: 'ðŸ‡¸ðŸ‡¸' },
  ET: { code: '+251', name: 'Ã‰thiopie', flag: 'ðŸ‡ªðŸ‡¹' },
  ER: { code: '+291', name: 'Ã‰rythrÃ©e', flag: 'ðŸ‡ªðŸ‡·' },
  DJ: { code: '+253', name: 'Djibouti', flag: 'ðŸ‡©ðŸ‡¯' },
  SO: { code: '+252', name: 'Somalie', flag: 'ðŸ‡¸ðŸ‡´' },
  KE: { code: '+254', name: 'Kenya', flag: 'ðŸ‡°ðŸ‡ª' },
  TZ: { code: '+255', name: 'Tanzanie', flag: 'ðŸ‡¹ðŸ‡¿' },
  UG: { code: '+256', name: 'Ouganda', flag: 'ðŸ‡ºðŸ‡¬' },
  BI: { code: '+257', name: 'Burundi', flag: 'ðŸ‡§ðŸ‡®' },
  RW: { code: '+250', name: 'Rwanda', flag: 'ðŸ‡·ðŸ‡¼' },
  MZ: { code: '+258', name: 'Mozambique', flag: 'ðŸ‡²ðŸ‡¿' },
  ZM: { code: '+260', name: 'Zambie', flag: 'ðŸ‡¿ðŸ‡²' },
  ZW: { code: '+263', name: 'Zimbabwe', flag: 'ðŸ‡¿ðŸ‡¼' },
  BW: { code: '+267', name: 'Botswana', flag: 'ðŸ‡§ðŸ‡¼' },
  NA: { code: '+264', name: 'Namibie', flag: 'ðŸ‡³ðŸ‡¦' },
  LS: { code: '+266', name: 'Lesotho', flag: 'ðŸ‡±ðŸ‡¸' },
  SZ: { code: '+268', name: 'Eswatini', flag: 'ðŸ‡¸ðŸ‡¿' },
  MG: { code: '+261', name: 'Madagascar', flag: 'ðŸ‡²ðŸ‡¬' },
  MU: { code: '+230', name: 'Maurice', flag: 'ðŸ‡²ðŸ‡º' },
  SC: { code: '+248', name: 'Seychelles', flag: 'ðŸ‡¸ðŸ‡¨' },
  KM: { code: '+269', name: 'Comores', flag: 'ðŸ‡°ðŸ‡²' },
  ZA: { code: '+27', name: 'Afrique du Sud', flag: 'ðŸ‡¿ðŸ‡¦' },
  AO: { code: '+244', name: 'Angola', flag: 'ðŸ‡¦ðŸ‡´' },
  CV: { code: '+238', name: 'Cap-Vert', flag: 'ðŸ‡¨ðŸ‡»' }
};

// Nettoyer un numÃ©ro de tÃ©lÃ©phone (supprimer espaces, tirets, etc.)
export const cleanPhoneNumber = (phone: string): string => {
  return phone.replace(/[\s\-\(\)\.]/g, '');
};

// Extraire le code pays d'un numÃ©ro
export const extractCountryCode = (phone: string): string | null => {
  const cleaned = cleanPhoneNumber(phone);
  
  // Chercher le code pays dans notre liste
  for (const [country, data] of Object.entries(COUNTRY_CODES)) {
    if (cleaned.startsWith(data.code.replace('+', ''))) {
      return country;
    }
  }
  
  return null;
};

// Formater un numÃ©ro pour l'affichage
export const formatPhoneForDisplay = (phone: string, countryCode: string = 'FR'): string => {
  const cleaned = cleanPhoneNumber(phone);
  const country = COUNTRY_CODES[countryCode as keyof typeof COUNTRY_CODES];
  
  if (!country) return phone;
  
  // Supprimer le code pays du dÃ©but
  let nationalNumber = cleaned;
  if (cleaned.startsWith(country.code.replace('+', ''))) {
    nationalNumber = cleaned.substring(country.code.replace('+', '').length);
  }
  
  // Formater selon le pays
  switch (countryCode) {
    case 'FR':
      // Format franÃ§ais: +33 6 12 34 56 78
      return `${country.code} ${nationalNumber.replace(/(\d{1})(\d{2})(\d{2})(\d{2})(\d{2})/, '$1 $2 $3 $4 $5')}`;
    case 'CI':
    case 'SN':
    case 'ML':
    case 'BF':
    case 'NE':
    case 'TG':
    case 'BJ':
    case 'CM':
    case 'TD':
    case 'CF':
    case 'GA':
    case 'CG':
    case 'CD':
    case 'GQ':
    case 'ST':
    case 'GW':
    case 'GN':
    case 'MR':
    case 'GM':
    case 'SL':
    case 'LR':
    case 'GH':
    case 'NG':
      // Format africain: +225 07 12 34 56 78
      return `${country.code} ${nationalNumber.replace(/(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/, '$1 $2 $3 $4 $5')}`;
    default:
      // Format gÃ©nÃ©rique
      return `${country.code} ${nationalNumber}`;
  }
};

// Formater un numÃ©ro pour le stockage en base de donnÃ©es
export const formatPhoneForStorage = (phone: string, countryCode: string = 'FR'): string => {
  const cleaned = cleanPhoneNumber(phone);
  const country = COUNTRY_CODES[countryCode as keyof typeof COUNTRY_CODES];
  
  if (!country) return cleaned;
  
  // S'assurer que le code pays est prÃ©sent
  if (!cleaned.startsWith(country.code.replace('+', ''))) {
    return country.code.replace('+', '') + cleaned;
  }
  
  return cleaned;
};

// Parser un numÃ©ro de tÃ©lÃ©phone complet
export const parsePhoneNumber = (phone: string, defaultCountry: string = 'FR'): PhoneNumber => {
  const cleaned = cleanPhoneNumber(phone);
  const detectedCountry = extractCountryCode(cleaned) || defaultCountry;
  const country = COUNTRY_CODES[detectedCountry as keyof typeof COUNTRY_CODES];
  

  
  if (!country) {
    return {
      countryCode: defaultCountry,
      nationalNumber: cleaned,
      formattedDisplay: cleaned,
      formattedStorage: cleaned,
      isValid: false
    };
  }
  
  // Extraire le numÃ©ro national
  let nationalNumber = cleaned;
  if (cleaned.startsWith(country.code.replace('+', ''))) {
    nationalNumber = cleaned.substring(country.code.replace('+', '').length);
  }
  
  const formattedDisplay = formatPhoneForDisplay(cleaned, detectedCountry);
  const formattedStorage = formatPhoneForStorage(cleaned, detectedCountry);
  
  // Validation basique (au moins 8 chiffres pour le numÃ©ro national)
  const isValid = nationalNumber.length >= 8 && nationalNumber.length <= 15;
  
  const result = {
    countryCode: detectedCountry,
    nationalNumber,
    formattedDisplay,
    formattedStorage,
    isValid
  };
  

  
  return result;
};

// Valider un numÃ©ro de tÃ©lÃ©phone
export const validatePhoneNumber = (phone: string, countryCode: string = 'FR'): boolean => {
  const parsed = parsePhoneNumber(phone, countryCode);
  return parsed.isValid;
};

// Obtenir la liste des pays pour un select
export const getCountryOptions = () => {
  return Object.entries(COUNTRY_CODES).map(([code, data]) => ({
    value: code,
    label: `${data.flag} ${data.name} (${data.code})`
  }));
};
